// n Knights similar to nQueens
public class Main {
    public static boolean isSafe(char[][] board, int row, int col) {
        // upper left 1
        for(int i=row-1, j=col-2; i>=0 && j>=0; i--, j--) {
            if(board[i][j] == 'K') {
                return false;
            }
        }

        // upper left 2
        for(int i=row-2, j=col-1; i>=0 && j>=0; i--, j--) {
            if(board[i][j] == 'K') {
                return false;
            }
        }

        // upper right 1
        for(int i=row-1, j=col+2; i>=0 && j<board.length; i--, j++) {
            if(board[i][j] == 'K') {
                return false;
            }
        }

        // upper right 2
        for(int i=row-2, j=col+1; i>=0 && j<board.length; i--, j++) {
            if(board[i][j] == 'K') {
                return false;
            }
        }
        return true;
    }

    public static void nKnights(char[][] board, int row) {
        // base case
        if(row == board.length) {
            printBoard(board);
            count++;
            return;
        }

        // column loop
        for(int j=0; j<board.length; j++) {
            if(isSafe(board, row, j) == true) {
                board[row][j] = 'K';
                nKnights(board, row+1);  // function call
                board[row][j] = 'x';    // Backtracking step
            }    
        }
    }

    public static void printBoard(char[][] board) {
        System.out.println("............ChessBoard............");
        for(int i=0; i<board.length; i++) {
            for(int j=0; j<board.length; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }
    static int count = 0;
    public static void main(String[] args) {
        int n = 4;
        char[][] board = new char[n][n];

        // initialise
        for(int i=0; i<board.length; i++) {
            for(int j=0; j<board.length; j++) {
                board[i][j] = 'x';
            }
        }

        nKnights(board, 0);
        System.out.println("No of ways to solve "+ n + " x " +n+" Knights is = " + count);
    }    
}