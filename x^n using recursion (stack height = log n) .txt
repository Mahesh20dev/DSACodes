// x^n using recursion (stack height = log n)
import java.util.Scanner;
import java.lang.Math;

public class Practice {
    public static int calPower(int x, int n) {
        if(n == 0) {         // Base 1
            return 1 ;
        }
        if(x == 0) { // base 2
            return 0;
        }
        // if n is even
        if( n % 2 == 0) {
            return calPower(x, n/2) * calPower(x, n/2);
        }
        //  else n is odd
        else {
            return calPower(x, n/2) * calPower(x, n/2) * x;
        }


    }

    public static void main(String[] args) {
        int x=2, n=5;
        int ans = calPower(x,n);
        System.out.println(ans);
    }
}

Output:
32