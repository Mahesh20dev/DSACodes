// Merge Sort (All) and quick sort
public class DSA {
    public static void printArr(int[] arr) {
        for(int i=0; i<arr.length; i++) {
            System.out.print(arr[i] +" ");
        }
    }

    mergeSort
    Time Complexity	O(n log n)
    Space Complexity	O(n)

    public static void mergeSort(int[] arr, int si, int ei) {
        // base case
        if(si >= ei) {
            return;
        }
        int mid = si + (ei - si)/2;  // (si + ei)/2
        // divide and sort
        mergeSort(arr, si, mid);
        mergeSort(arr, mid+1, ei);

        merge(arr, si, mid, ei);
    }

    public static void merge(int[] arr, int si, int mid, int ei) {
        // left [2, 3, 4, 3] , right [ 2, 5, 6, 7] ei = 7 si = 0    7-0 + 1 = 8
        int[] temp = new int[ei-si+1]; // creating temporary array
        int i = si;
        int j = mid+1;
        int k = 0;

        // conquer
        while(i <= mid && j <= ei) {
            if(arr[i] < arr[j]) {
                temp[k] = arr[i];
                i++;
            } else {
                temp[k] = arr[j];
                j++;
            }
            k++;
        }

        // if any element left 
        // left 
        while(i <= mid) {
            temp[k++] = arr[i++]; 
        }

        // right
        while(j <= ei) {
            temp[k++] = arr[j++];
        }

        // copy temp array to arr
        for(k=0, i=si; k<temp.length; k++, i++) {
            arr[i] = temp[k];
        }
    }

    public static void quickSort(int[] arr, int si, int ei) {
        if(si >= ei) {
            return;
        }
        int pIdx = partition(arr, si, ei);

        quickSort(arr, si, pIdx-1);
        quickSort(arr, pIdx+1, ei);
    }

    public static int partition(int[] arr, int si, int ei) {
        int pivot = arr[ei];
        int i = si-1;      // to make space for smaller elements than pivot

        for(int j=si; j<ei; j++) {
            if(arr[j] < pivot) {
                i++;
                // swap
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        // swap with pivot
        i++;
        int temp = pivot;
        arr[ei] = arr[i];
        arr[i] = temp;
        return i;
    }

    public static int rotatedSortedArrayRecursion(int[] arr, int target, int si, int ei) {
        if(si > ei) {
            return -1;
        }

        int mid = si + (ei - si)/2;

        if(arr[mid] == target) {
            return mid;
        }

        // Line 1
        if(arr[si] <= arr[mid]) {
            // case a
            if(arr[si] <= target && target <= arr[mid]) {
                return rotatedSortedArrayRecursion(arr, target, si, mid-1);
            }  // case b
            else {                   
                return rotatedSortedArrayRecursion(arr, target, mid+1, ei);
            }

        } else {    // Line 2
            // case c
            if(arr[mid] <= target && target <= arr[ei]) {
                return rotatedSortedArrayRecursion(arr, target, mid+1, ei);
            } // case d
            else {
                return rotatedSortedArrayRecursion(arr, target, si, mid-1);
            }
        }
    }

    public static int[] mergeTwoSortedArr(int[] arr1, int[] arr2) {
        int m = arr1.length;
        int n = arr2.length;
        int[] res = new int[m+n];
    
        int i = 0;
        int j = 0;
        int k = 0;

        while(i < m && j < n) {
            if(arr1[i] < arr2[j]) {
                res[k] = arr1[i];
                i++;
            } else {
                res[k] = arr2[j];
                j++;
            }
            k++;
        }

        while(i < m) {
            res[k++] = arr1[i++];
        }

        while(j < n) {
            res[k++] = arr2[j++];
        }
        return res;
        
    }

    static int count = 0;
    public static int[] mergeTwoSortedArr2(int[] left, int[] right) {
        int m = right.length;
        int n = right.length;
        int[] res = new int[m+n];
    
        int i = 0;
        int j = 0;
        int k = 0;

        while(i < m && j < n) {
            if(right[i] < right[j]) {
                res[k] = right[i];
                i++;
            } else {
                res[k] = right[j];
                count += (m - i);
                j++;
            }
            k++;
        }

        while(i < m) {
            res[k++] = right[i++];
        }

        while(j < n) {
            res[k++] = right[j++];
        }
        return res;
        
    }

    public static int[] countInversions(int[] arr, int si, int ei) {
        if(si >= ei) {
            int[] ba = new int[1];
            ba[0] = arr[si];
            return ba;
        }

        int mid = si + (ei - si)/2;
        int[] left = countInversions(arr, si, mid);
        int[] right = countInversions(arr, mid+1, ei);
        int[] res = mergeTwoSortedArr2(left, right);
        return res;
    }
    public static void main(String[] args) {
        int arr[] = {2, 2, 1, 1, 1, 2, 2};
        mergeSort(arr, 0, arr.length-1);
        // quickSort(arr, 0, arr.length-1);
        printArr(arr);

        // int target = rotatedSortedArrayRecursion(arr, 0, 0, arr.length-1);
        // System.out.println(target);

        // int[] arr1 = {4, 6 , 8, 10};
        // int[] arr2 = {3, 5, 7, 9};
        // int[] res = mergeTwoSortedArr(arr1, arr2);

        // for(int i=0; i<res.length; i++) {
        //     System.out.print(res[i] + " ");
        // }
        // int[] arr = {2, 4, 1, 3, 5};
        // countInversions(arr, 0, 4);
        // System.out.println(count);
    }
}
