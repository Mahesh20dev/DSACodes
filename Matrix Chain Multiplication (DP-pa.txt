// Matrix Chain Multiplication (DP-part-6)
import java.util.Arrays;
public class Practice2 {
    // Recursion - Time = O(2^n * n)     Space = O(n) - recursion stack
    public static int mcm(int arr[], int i, int j) {
        if(i == j) return 0;     // single matrix case
        int minCost = Integer.MAX_VALUE;

        for(int k=i; k<=j-1; k++) {
            int cost1 = mcm(arr, i, k);       // Ai.....Ak  => arr[i-1] X arr[i]
            int cost2 = mcm(arr, k+1, j);     // Ak+1...Aj  arr[k] X arr[j]
            int cost3 = arr[i-1] * arr[k] * arr[j];
            int finalCost = cost1 + cost2 + cost3;
            minCost = Math.min(minCost, finalCost);
        }
        return minCost;
    }

    // Memoization Time = O(n^2 * n(n for loop-k) = O(n^3)) , Space = O(n^2) 
    public static int mcmMemo(int arr[], int i, int j, int dp[][]) {
        if(i == j) return 0;

        if(dp[i][j] != -1) {
            return dp[i][j];
        }

        int minCost = Integer.MAX_VALUE;
        for(int k=i; k<=j-1; k++) {
            int cost1 = mcmMemo(arr, i, k, dp);
            int cost2 = mcmMemo(arr, k+1, j, dp);
            int cost3 = arr[i-1] * arr[k] * arr[j];
            minCost = Math.min(minCost, cost1 + cost2 + cost3);
        }
        return dp[i][j] = minCost;
    }

    // Tabulation   Time and space complexity same as Memoization
    public static int mcmTab(int arr[]) {
        int n = arr.length;
        int dp[][] = new int[n][n];

        // initialization
        for(int i=0; i<dp.length; i++) {
            dp[i][i] = 0;
        }

        // bottom up
        for(int len=2; len<=n-1; len++) {
            for(int i=1; i<=n-len; i++) {
                int j = i+len-1;
                dp[i][j] = Integer.MAX_VALUE;
                for(int k=i; k<=j-1; k++) {
                    int cost1 = dp[i][k];
                    int cost2 = dp[k+1][j];
                    int cost3 = arr[i-1] * arr[k] * arr[j];
                    dp[i][j] = Math.min(dp[i][j], cost1 + cost2 + cost3);
                }
            }
        }
        return dp[1][n-1];
    }

    public static void main(String[] args) {
        int arr[] = {1, 2, 3, 4, 3};
        int n = arr.length;
        // System.out.println(mcm(arr, 1, n-1));

        // Memoization
        int dp[][] = new int[n][n];
        for(int i=0; i<n; i++) {
            Arrays.fill(dp[i], -1);
        }
        // System.out.println(mcmMemo(arr, 1, n-1, dp));

        // Tabulation
        System.out.println(mcmTab(arr));
    }
}