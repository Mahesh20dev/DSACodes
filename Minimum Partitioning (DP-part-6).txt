// Minimum Partitioning (DP-part-6)
public class Abcd {
    // Time and space = O(n * w) 
    public static int minPartition(int arr[]) {
        int n = arr.length;
        int sum = 0;
        for(int i=0; i<n; i++) {
            sum += arr[i];
        }

        int W = sum/2;
        int dp[][] = new int[n+1][W+1];

        // initialization - no need because default value is 0

        // bottom up
        for(int i=1; i<dp.length; i++) {
            for(int j=1; j<dp[0].length; j++) {
                if(arr[i-1] <= j) {
                    dp[i][j] = Math.max(arr[i-1] + dp[i-1][j-arr[i-1]], dp[i-1][j]);
                    //                       include                     exclude
                } else {
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        int sum1 = dp[n][W];
        int sum2 = sum - sum1;
        return Math.abs(sum1 - sum2);
    }

    // checking difference bw to set can have 0 or not
    public static boolean minPartitionvalid(int arr[]) {
        int n = arr.length;
        int sum = 0;
        for(int i=0; i<n; i++) {
            sum += arr[i];
        }

        if(sum % 2 != 0) {
            return false;
        }

        int W = sum/2;
        int dp[][] = new int[n+1][W+1];

        // initialization - no need because default value is 0

        // bottom up
        for(int i=1; i<dp.length; i++) {
            for(int j=1; j<dp[0].length; j++) {
                if(arr[i-1] <= j) {
                    dp[i][j] = Math.max(arr[i-1] + dp[i-1][j-arr[i-1]], dp[i-1][j]);
                    //                       include                     exclude
                } else {
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        int sum1 = dp[n][W];
        return sum1 == sum/2;
    }

    public static void main(String[] args) {
        int arr[] = {1, 6, 11, 5};
        System.out.println(minPartition(arr));
        System.out.println(minPartitionvalid(arr));
    }
}