// Majority element using merge sort
class Leetcode {

    public static int majorityElement(int[] nums) {
        return majorityElementRec(nums, 0, nums.length-1);
    }
 
    public static int majorityElementRec(int[] nums, int si, int ei) {
        if(si == ei) {
            return nums[si];
        }

        int mid = si + (ei - si)/2;
        int left = majorityElementRec(nums, si, mid);        
        int right = majorityElementRec(nums, mid+1, ei);     
        
        if(left == right) {
            return left;
        }

        int leftCount = count(nums, left, si, ei);
        int rightCount = count(nums, right, si, ei);

        return leftCount > rightCount ? left : right;

    }

    public static int count(int[] nums, int num, int si, int ei) {
        int count = 0;
        for(int i=0; i<nums.length; i++) {
            if(nums[i] == num) {
                count++;
            } 
        }
        return count;
    }

    public static void main(String[] args) {
        int[] nums = {2, 2, 1, 1, 1, 2, 2};
        System.out.println(majorityElement(nums));
    }
}