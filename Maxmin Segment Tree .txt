// Max/min Segment Tree 
public class DSA {
    static int tree[];
    public static void init(int n) {
        tree = new int[4*n];
    }

    public static void buildST(int arr[], int i, int si, int sj) {
        if(si == sj) {
            tree[i] = arr[si];
            return;
        }
        int mid = si + (sj - si) / 2;
        buildST(arr, 2*i+1, si, mid);
        buildST(arr, 2*i+2, mid+1, sj);
        tree[i] = Math.max(tree[2*i+1], tree[2*i+2]);
    }

    // Queries
    public static int getMaxUtil(int i, int si, int sj, int qi, int qj) {
        if(qj < si || sj < qi) {     // no overlap
            return Integer.MIN_VALUE;
        } else if(qi <= si && sj <= qj) {     // complete overlap
            return tree[i];
        } else {          // partial overlap
            int mid = (si + sj)/2;
            int left = getMaxUtil(2*i+1, si, mid, qi, qj);
            int right = getMaxUtil(2*i+2, mid+1, sj, qi, qj);
            return Math.max(left, right);
        }
    }

    public static int getMax(int arr[], int qi, int qj) {
        int n = arr.length; 
        return getMaxUtil(0, 0, n-1, qi, qj);
    }

    // Update  
    public static void updateUtil(int i, int si, int sj, int idx, int newValue) {
        if(idx < si || sj < idx) {
            return;
        }

        if(si == sj) {
            tree[i] = newValue;    // in leaf node newValue is the max or minValue
        }

        if(si != sj) {     // not a leaf node
            tree[i] = Math.max(tree[i], newValue);
            int mid = (si + sj) / 2;
            updateUtil(2*i+1, si, mid, idx, newValue);    // left
            updateUtil(2*i+2, mid+1, sj, idx, newValue);   // right
        }
    }

    public static void update(int arr[], int idx, int newValue) {
        int n = arr.length; 
        arr[idx] = newValue;
        updateUtil(0, 0, n-1, idx, newValue);
    }
    public static void main(String[] args) {
        int arr[] = {6, 8, -1, 2, 17, 1, 3, 2, 4};
        int n = arr.length;
        init(n);
        buildST(arr, 0, 0, n-1);

        // for(int i=0; i<tree.length; i++) {
        //     System.out.print(tree[i] + " ");
        // }
        // System.out.println();
        System.out.println(getMax(arr, 0, 3));
        update(arr, 2, 15);
        System.out.println(getMax(arr, 0, 3));
    }
}

// Time and space complexity same as Segment tree part-1 (creation of segment trees)