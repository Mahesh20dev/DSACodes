// Trapped RainWater (DSA - 12)
import java.util.*;
public class Practice {

    public static int TrappedRainwater(int[] height, int width) {
        int n = height.length;

        if(n <= 2) {
            return 0;
        }

        // leftside array maxheight
        int leftMaxHeight[] = new int[n];
        leftMaxHeight[0] = height[0];
        for(int i=1; i<n; i++) {
            leftMaxHeight[i] = Math.max(leftMaxHeight[i-1], height[i]);
        }

        // Rightside array maxHeight
        int rightMaxHeight[] = new int[n];
        rightMaxHeight[n-1] = height[n-1];
        for(int i=n-2; i>=0; i--) {
            rightMaxHeight[i] = Math.max(rightMaxHeight[i+1], height[i]);
        }

        // Trappedwater
        int trappedWater = 0;
        for(int i=0; i<n; i++) {
            int waterLevel = Math.min(rightMaxHeight[i], leftMaxHeight[i]);

            trappedWater += waterLevel - height[i] * width;
        }

        return trappedWater;
    }

    // One more approach
    public int trap(int[] height) {
        int n = height.length; 
        int res = 0, l = 0, r = n - 1; 
        int rMax = height[r], lMax = height[l]; 
        while (l < r) {
            if (lMax < rMax) {
                l++;
                lMax = Math.max(lMax, height[l]);
                res += lMax - height[l]; 
            } else { 
                r--; 
                rMax = Math.max(rMax, height[r]); 
                res += rMax - height[r]; 
            } 
        } 
        return res; 
    }


    public static void main(String[] args) {
        int[] height = {4, 2, 0, 6, 3, 2, 5};
        int width = 1;

        System.out.println(TrappedRainwater(height, width));
    }
    
}

// Output: 11     T O(n) == O(height.length)