//Cycle Detection (undirected graph) (Graph-sigma)
import java.util.*;
public class Main {
    static class Edge {
        int src;
        int dest;
        public Edge(int s, int d) {
            this.src = s;
            this.dest = d;
        }
    }

    public static void createGraph(ArrayList<Edge> graph[]) {
        for(int i=0; i<graph.length; i++) {
            graph[i] = new ArrayList<>();
        }

        // 0 vertex
        graph[0].add(new Edge(0, 1));
        graph[0].add(new Edge(0, 2));
        graph[0].add(new Edge(0, 3));

        // 1 vertex
        graph[1].add(new Edge(1, 0));
        graph[1].add(new Edge(1, 2));

        // 2 vertex
        graph[2].add(new Edge(2, 0));
        graph[2].add(new Edge(2, 1));

        // 3 vertex
        graph[3].add(new Edge(3, 0));
        graph[3].add(new Edge(3, 4));

        // 4 vertex
        graph[4].add(new Edge(4, 3));
    }
    
    // Time = O(V + E)        dfs
    public static boolean detectCylce(ArrayList<Edge> graph[]) {
        boolean vis[] = new boolean[graph.length];
        for(int i=0; i<graph.length; i++) {
            if(!vis[i]) {
                if(detectCylceUtil(graph, vis, i, -1)) {
                    return true;
                }
                // cycle exist in any one of the part
            }
        }
        return false;
    }
    
    public static boolean detectCylceUtil(ArrayList<Edge> graph[], boolean vis[], int curr, int par) {
        vis[curr] = true;

        for(int i=0; i<graph[curr].size(); i++) {
            Edge e = graph[curr].get(i);

            // case 3 
            if(!vis[e.dest]) {
                if(detectCylceUtil(graph, vis, e.dest, curr)) {
                    return true;
                }
            } else if(vis[e.dest] && e.dest != par) {      // case 1
                return true;
            }

            // case 3 = vis[e.dest] && e.dest == par -> do nothing -> continue ,
            // no need to write (automatically happens)
        }
        return false;
    }
// bfs
    public static boolean detectCylcebfs(ArrayList<Edge> graph[]) {
        boolean vis[] = new boolean[graph.length];
        for(int i=0; i<graph.length; i++) {
            if(!vis[i]) {
                if(detectCylceBfsUtil(graph, vis, i)) {
                    return true;
                }
                // cycle exist in any one of the part
            }
        }
        return false;
    }

    public static boolean detectCylceBfsUtil(ArrayList<Edge> graph[], boolean vis[], int start) {
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{start, -1});
        vis[start] = true;

        while(!q.isEmpty()) {
            int[] pair = q.poll();
            int curr = pair[0];
            int par = pair[1];

            for(Edge e: graph[curr]) {
                if(!vis[e.dest]) {
                    vis[e.dest] = true;
                    q.add(new int[]{e.dest, curr});
                } else if(vis[e.dest] && e.dest != par) {
                    return true;
                }
            }
        }
        return false;
    }

    public static void main(String[] args) {
        int V = 5;
        @SuppressWarnings("unchecked")
        ArrayList<Edge> graph[] = new ArrayList[V];  // null --> empty array
        createGraph(graph);

/*            0 -- 3
 *          / |    |
 *        1   |    4
 *          \ |
 *            2
 */         

        System.out.println(detectCylce(graph));
    }
}
