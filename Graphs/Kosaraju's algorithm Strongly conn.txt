// Kosaraju's algorithm Strongly connected components(graph)
import java.util.*;
public class OnceAgain {
    static class Edge {
        int src;
        int dest;
        public Edge(int s, int d) {
            this.src = s;
            this.dest = d;
        }
    }

    public static void createGraph(ArrayList<Edge> graph[]) {
        for(int i=0; i<graph.length; i++) {
            graph[i] = new ArrayList<>();
        }

        // 0 vertex
        graph[0].add(new Edge(0, 2));
        graph[0].add(new Edge(0, 3));

        // 1 vertex
        graph[1].add(new Edge(1, 0));

        // 2 vertex
        graph[2].add(new Edge(2, 1));

        // 3 vertex
        graph[3].add(new Edge(3, 4));

    }

    public static void topSort(ArrayList<Edge> graph[], int curr, boolean vis[], Stack<Integer> s) {
        vis[curr] = true;
        for(int i=0; i<graph[curr].size(); i++) {
            Edge e = graph[curr].get(i);
            if(!vis[e.dest]) {
                topSort(graph, e.dest, vis, s);
            }
        }
        s.push(curr);
    }

    public static void dfs(ArrayList<Edge> transpose[], int curr, boolean vis[]) {
        vis[curr] = true;
        System.out.print(curr + " ");
        for(Edge e : transpose[curr]) {
            if(!vis[e.dest]) {
                dfs(transpose, e.dest, vis);
            }
        }
    }

    public static void kosaraju(ArrayList<Edge> graph[], int V) {
        // step 1   get nodes in stack(topological sort)
        Stack<Integer> s = new Stack<>();
        boolean vis[] = new boolean[V];
        for(int i=0; i<V; i++) {
            if(!vis[i]) {
                topSort(graph, i, vis, s);
            }
        }

        // step 2   Transpose the graph (reverse the edge)
        @SuppressWarnings("unchecked")
        ArrayList<Edge> transpose[] = new ArrayList[V];
        for(int i=0; i<V; i++) {
            transpose[i] = new ArrayList<>();
            vis[i] = false;            // making empty to reuse vis again
        }

        for(int i=0; i<V; i++) {
            for(int j=0; j<graph[i].size(); i++) {
                Edge e = graph[i].get(j);
                transpose[e.dest].add(new Edge(e.dest, e.src));  // reversing edge
            }
        }

        // step 3  Do dfs according to stack nodes on the transpose graph
        while(!s.isEmpty()) {
            int curr = s.pop();
            if(!vis[curr]) {
                System.out.print("SCC -> ");
                dfs(transpose, curr, vis);
                System.out.println();
            }
        }
    }

    public static void main(String[] args) {
        int V = 5;
        @SuppressWarnings("unchecked")
        ArrayList<Edge> graph[] = new ArrayList[V];  // null --> empty array
        createGraph(graph);

        kosaraju(graph, V);
    }
}

// Time and space = O(V + E)