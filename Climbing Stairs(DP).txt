//Climbing Stairs(DP)
import java.util.Arrays;
public class Revision {
    // recursion     O(2^n)
    public static int countWays(int n) {
        if(n == 0) return 1;
        if(n < 0) return 0;
        return countWays(n-1) + countWays(n-2);
    }

    // Memoization       O(n)
    public static int countWays(int n, int dp[]) {
        if(n == 0) return 1;
        if(n < 0) return 0;

        if(dp[n] != -1) {
            return dp[n];
        }

        dp[n] = countWays(n-1, dp) + countWays(n-2, dp);
        return dp[n];
    }

    // Tabulation  O(n)
    public static int countWaysTab(int n) {
        int dp[] = new int[n+1];
        dp[0] = 1;

        for(int i=1; i<n+1; i++) {
            if(i == 1) {
                dp[i] = dp[i-1] + 0;
            } else {
                dp[i] = dp[i-1] + dp[i-2];
            }
        }
        return dp[n];
    }

    public static void main(String[] args) {
        int n = 5;
        int dp[] = new int[n+1];
        // System.out.println(countWays(n));
        Arrays.fill(dp, -1);
        System.out.println(countWays(n, dp));
        System.out.println(countWaysTab(n));
    }
}