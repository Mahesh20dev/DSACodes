// count unique substrings(Trie - sigma)
public class Practice {
    static class Node {
        Node children[] = new Node[26];
        boolean eow = false;
        Node() {
            for(int i=0; i<26; i++) {
                children[i] = null;
            }
        }  
    }  

    public static Node root = new Node();

    public static void insert(String word) {   // Time = O(L) = L, length of longest word
        Node curr = root;
        for(int level=0; level<word.length(); level++) {
            char ch = word.charAt(level);
            int idx = ch - 'a';
            if(curr.children[idx] == null) {
                curr.children[idx] = new Node();
            }
            curr = curr.children[idx];
        }
        curr.eow = true;
    }

    public static int countNodes(Node root) {   // Time = O(L)
        if(root == null) return 0;
        int count = 0;
        for(int i=0; i<26; i++) {
            if(root.children[i] != null) {
                count += countNodes(root.children[i]);
            }
        }
        return count + 1;
    }
    public static void main(String[] args) {
        String str = "ababa"; // ans = 10
    //  suffix -> trie
        for(int i=0; i<str.length(); i++) {
            String suffix = str.substring(i);
            insert(suffix);
        }
        System.out.println(countNodes(root));
    }
}