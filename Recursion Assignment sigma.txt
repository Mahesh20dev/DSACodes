// Recursion Assignment sigma
import java.lang.Math;
public class Recursion {

    public static void printArr(int[] arr) {
        for(int i=0; i<arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }

    public static void changeArr(int[] arr, int i, int val) {
        if(i == arr.length) {
            printArr(arr);
            return;
        }
        arr[i] = val;
        changeArr(arr, i+1, val+1);    // recursion
        arr[i] = arr[i]-2;             // Backtracking
    }

    public static void findSubsets(String str, int i, StringBuilder sb) {    // T - O(n * 2^n) , S - O(n)
        // base case    
        if(i == str.length()) {
            if(sb.length() == 0) {
                System.out.println("null");
            } else {
                System.out.println(sb);
            }
            return;
        }
        // Yes
        sb.append(str.charAt(i));         // appendig str char to string builder
        findSubsets(str, i+1, sb);

        sb.deleteCharAt(sb.length()-1);   // deleting last character
        // No
        findSubsets(str, i+1, sb);         
    }

    public static void printPermutation(String str, String ans) {
        // base case
        if(str.length() == 0) {
            System.out.println(ans);
            return;
        }

        // recursion
        for(int i=0; i<str.length(); i++) {
            char ch = str.charAt(i);
            // "abcd" = "ab" + "d" = "abd"
            String newStr = str.substring(0, i) + str.substring(i+1);
            printPermutation(newStr, ans+ch); 
        }
    }

    public static int gridWays(int i, int j, int m, int n) {   // T - O(2^(n+m))
        if(i == m-1 || j == n-1) {
            return 1;
        } else if(i == m || i == n) {
            return 0;
        }

        int totalWays = gridWays(i+1, j, m, n) + gridWays(i, j+1, m, n);
        return totalWays;
    }

    public static void main(String[] args) {
        // int[] arr = new int[5];
        // changeArr(arr, 0, 1);
        // printArr(arr);

    //     findSubsets("ab", 0, new StringBuilder(""));  // string builder will be the ans

        // printPermutation("abc", "");
        System.out.println(gridWays(0, 0, 4, 4));
    }
}