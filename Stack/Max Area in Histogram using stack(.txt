// Max Area in Histogram using stack(sigma)
import java.util.*;
public class DSA {
    public static int maxArea(int[] arr) {
        int maxArea = 0;
        int n = arr.length;
        int[] nsl = new int[n];
        int[] nsr = new int[n];

        // next smallest right
        Stack<Integer> s = new Stack<>();
        for(int i=n-1; i>=0; i--) {
            while(!s.isEmpty() && arr[s.peek()] >= arr[i]) {
                s.pop();
            }
            if(s.isEmpty()) {
                nsr[i] = n;
            }else {
                nsr[i] = s.peek();
            }
            s.push(i);
        }

        // next smallest left
        s = new Stack<>();
        for(int i=0; i<n; i++) {
            while(!s.isEmpty() && arr[s.peek()] >= arr[i]) {
                s.pop();
            }
            if(s.isEmpty()) {
                nsl[i] = -1;
            }else {
                nsl[i] = s.peek();
            }
            s.push(i);
        }

        // maxArea
        for(int i=0; i<n; i++) {
            int height = arr[i];
            int width = nsr[i] - nsl[i] - 1;   // j - i - 1
            int currarea = height * width;
            maxArea = Math.max(maxArea, currarea);
        }

        return maxArea;
    }
    public static void main(String[] args) {
        int[] arr = {2, 4, 1, 6, 3, 3};
        System.out.println(maxArea(arr));
    }
}