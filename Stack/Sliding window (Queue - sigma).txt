// Sliding window (Queue - sigma)
import java.util.*;
import java.util.LinkedList;
public class OnceAgain {
    static void printSlidingWindowMaximumBruteForce(int arr[], int N, int K)
    {
        for (int i = 0; i <= N - K; i++) {
 
            int currMax = arr[i];
 
            for (int j = 1; j < K; j++) {
                if (arr[i + j] > currMax)
                    currMax = arr[i + j];
            }
            System.out.print(currMax + " ");
        }
    }
 
    static void printSlidingWindowMaximumDeque(int arr[], int N, int K)
    {
 
        Deque<Integer> queue = new LinkedList<>();
 
        for (int i = 0; i < K; ++i) {
 
            // For every element, the previous
            // smaller elements are useless so
            // remove them from Qi
            while (!queue.isEmpty()
                   && arr[i] >= arr[queue.peekLast()])
                // Remove from rear
                queue.removeLast();
 
            // Add new element at rear of queue
            queue.addLast(i);
        }
 
        // Print first window maximum
        System.out.print(arr[queue.peek()] + " ");
 
        // Process rest of the elements,
        // i.e., from arr[k] to arr[n-1]
        for (int i=K; i < N; ++i) {
 
            // Remove the elements which
            // are out of this window
            while ((!queue.isEmpty()) && queue.peek() <= i - K)
                queue.removeFirst();
 
            // Remove all elements smaller
            // than the currently
            // being added element (remove
            // useless elements)
            while ((!queue.isEmpty())
                   && arr[i] >= arr[queue.peekLast()])
                queue.removeLast();
 
            // Add current element at the rear of Qi
            queue.addLast(i);
 
            // Print the maximum element of last window
            System.out.print(arr[queue.peek()] + " ");
        }
    }

// using priority Queue

    static class Pair implements Comparable<Pair> {
        int val;
        int idx;
        public Pair(int val, int idx) {
            this.val = val;
            this.idx = idx;
        }

        @Override 
        public int compareTo(Pair p2) {
            return p2.val - this.val;     // descending order
        }
    }

    public static int[] slidingWindowPQ(int[] arr, int k) {       // Time = O(n logk)
        PriorityQueue<Pair> pq = new PriorityQueue<>();         // spacce = O(n)
        int res[] = new int[arr.length-k+1];
        int idx = 0;

        for(int i=0; i<k; i++) {
            pq.add(new Pair(arr[i], i));
        }

        res[idx++] = pq.peek().val;

        for(int i=k; i<arr.length; i++) {
            while(pq.size() > 0 && pq.peek().idx <= (i-k)) {
                pq.remove();
            }

            pq.add(new Pair(arr[i], i));
            res[idx++] = pq.peek().val;
        }
        return res;
    }
 
     public static void main(String args[])
    {
        int arr[] = { 1, 2, 3, 1, 4, 5, 2, 3, 6};
        int K = 3;
 
        printSlidingWindowMaximumDeque(arr, arr.length, K);
    }
}
