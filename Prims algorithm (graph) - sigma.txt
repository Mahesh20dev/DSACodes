//Prims algorithm (graph) - sigma
import java.util.ArrayList;
import java.util.PriorityQueue;

public class Revision2 {
    static class Edge {
        int src;
        int dest;
        int wt;
        public Edge(int s, int d, int w) {
            this.src = s;
            this.dest = d;
            this.wt = w;
        }
    }

    public static void createGraph(ArrayList<Edge> graph[]) {
        for(int i=0; i<graph.length; i++) {
            graph[i] = new ArrayList<>();
        }

        // 0 vertex
        graph[0].add(new Edge(0, 1, 10));
        graph[0].add(new Edge(0, 2, 15));
        graph[0].add(new Edge(0, 3, 30));

        // 1 vertex
        graph[1].add(new Edge(1, 0, 10));
        graph[1].add(new Edge(1, 3, 40));

        // 2 vertex
        graph[2].add(new Edge(2, 0, 15));
        graph[2].add(new Edge(2, 3, 50));

        // 3 vertex
        graph[3].add(new Edge(3, 0, 30));
        graph[3].add(new Edge(2, 1, 40));
        graph[3].add(new Edge(2, 2, 50));
    }

    static class Pair implements Comparable<Pair> {
        int v;  // vertex
        int cost;
        int par; 
        Pair(int v, int c, int p) {
            this.v = v;
            this.cost = c;
            this.par = p;
        }

        @Override
        public int compareTo(Pair p2) {
            return this.cost - p2.cost;
        }
    }

    public static void prims(ArrayList<Edge> graph[]) {
        boolean vis[] = new boolean[graph.length];
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        pq.add(new Pair(0, 0, -1));
        int finalCost = 0;
        ArrayList<Edge> res = new ArrayList<>();

        while(!pq.isEmpty()) {
            Pair curr = pq.remove();
            if(!vis[curr.v]) {
                vis[curr.v] = true;
                finalCost += curr.cost;

                if(curr.par != -1) {
                    res.add(new Edge(curr.par, curr.v, curr.cost));
                }
                for(Edge e: graph[curr.v]) {
                    pq.add(new Pair(e.dest, e.wt, e.src));
                }
            }
        }
        System.out.println("Minimum cost by Prims algo is " + finalCost);
        
        for(Edge e : res) {
            System.out.println("src : " + e.src + " <-> dest : " + e.dest);
        }
    }

    public static void main(String[] args) {
        int V = 4;
        @SuppressWarnings("unchecked")
        ArrayList<Edge> graph[] = new ArrayList[V];  // null --> empty array
        createGraph(graph);
        prims(graph);
    }
}

// Time Complexity:  O((V+E)logV)
// Space Complexity: O(V+E)