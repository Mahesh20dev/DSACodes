// Greedy algorithms some problem(sigma)
import java.util.*;
public class DSA {
    // Maximum sum absolute difference
     // O(n logn)
    public static void minDiff() {   
        int A[] = {4, 1, 8, 7};
        int B[] = {2, 3, 6, 5};

        Arrays.sort(A);
        Arrays.sort(B);
        int minDiff = 0;
        for(int i=0; i<A.length; i++) {
            minDiff += Math.abs(A[i] - B[i]);
        }

        System.out.println("Sum of Min absolute diff is "+ minDiff);
    }

    // Maximum length chain of pairs
    public static void maxChainPairs() {
        int pairs[][] = {{5, 24}, {39, 60}, {5, 28}, {27, 40}, {50, 90}};

        Arrays.sort(pairs, Comparator.comparingDouble(o -> o[1]));

        int chainLength = 1;
        int chainEnd = pairs[0][1];
        for(int i=1; i<pairs.length; i++) {
            if(pairs[i][0] > chainEnd) {
                chainLength++;
                chainEnd = pairs[i][1];
            }
        }

        System.out.println("Max chain length is = " + chainLength);
    }

    // Indian coins
    // O(n logn)
    public static void indianCoin() {
        Integer coins[] = {1, 2, 5, 10, 20, 50, 100, 500, 2000};
        int amount = 2618;
        Arrays.sort(coins, Collections.reverseOrder());

        ArrayList<Integer> ans = new ArrayList<>();
        int remAmount = amount;
        int count = 0;

        for(int i=0; i<coins.length; i++) {
            if(coins[i] <= remAmount) {
                while(coins[i] <= remAmount) {
                    count++;
                    ans.add(coins[i]);
                    remAmount -= coins[i];
                }
            }
        }
        System.out.println("Total (min) coins used = "+ count);

        for(int i=0; i<ans.size(); i++) {
            System.out.print(ans.get(i) + " ");
        }
    }
    public static void main(String[] args) {   
        // minDiff();
        // maxChainPairs();
        indianCoin();
    }
}