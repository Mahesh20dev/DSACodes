// 3Sum in leetcode = 15
import java.util.*;
public class Lab {
    // Time = O(n logn + n^3) = O(n^3)
    // Space = O(n + 3n) = O(n) , but in worst case it might be go O(n^2) , when unique triplet found 
    public static ArrayList<ArrayList<Integer>> threeSum(int arr[]) {
        ArrayList<ArrayList<Integer>> list = new ArrayList<>();
        HashSet<ArrayList<Integer>> set = new HashSet<>();
        Arrays.sort(arr);
        for(int i=0; i<arr.length-2; i++) {
            for(int j=i+1; j<arr.length-1; j++) {
                for(int k=j+1; k<arr.length; k++) {
                    ArrayList<Integer> temp = new ArrayList<>();
                    if(arr[i] + arr[j] + arr[k] == 0) {
                        temp.add(arr[i]);
                        temp.add(arr[j]);
                        temp.add(arr[k]);
                        // list.add(temp);
                        if(!set.contains(temp)) {
                            set.add(temp);
                            list.add(temp);
                        }
                    }
                }
            }
        }
        return list;
    }

    // Time = O(n^2)
    // Space = O(m), where m is the number of unique triplets found (in the worst case, O(nÂ²)).
    public static ArrayList<ArrayList<Integer>> threeSum1(int arr[]) {
        ArrayList<ArrayList<Integer>> list = new ArrayList<>();
        Arrays.sort(arr);  // Sort the array to use the two-pointer technique
    
        for (int i = 0; i < arr.length - 2; i++) {
            // Avoid processing the same element for i multiple times
            if (i > 0 && arr[i] == arr[i - 1]) continue;
    
            int left = i + 1;  // Left pointer
            int right = arr.length - 1;  // Right pointer
    
            while (left < right) {
                int sum = arr[i] + arr[left] + arr[right];
    
                if (sum == 0) {
                    // Found a triplet
                    ArrayList<Integer> triplet = new ArrayList<>();
                    triplet.add(arr[i]);
                    triplet.add(arr[left]);
                    triplet.add(arr[right]);
                    list.add(triplet);
    
                    // Move the left pointer to avoid duplicates
                    while (left < right && arr[left] == arr[left + 1]) left++;
                    // Move the right pointer to avoid duplicates
                    while (left < right && arr[right] == arr[right - 1]) right--;
    
                    // Move both pointers after processing the triplet
                    left++;
                    right--;
                } else if (sum < 0) {
                    // If the sum is less than 0, move the left pointer to increase the sum
                    left++;
                } else {
                    // If the sum is greater than 0, move the right pointer to decrease the sum
                    right--;
                }
            }
        }
    
        return list;
    }
    public static void main(String[] args) {
        int arr[] = {-1, 0, 1, 2, -1, -4};
        System.out.println(threeSum1(arr));
    }
}