// Things about 2D Array
import java.util.*;
public class Main {
    public static boolean search(int matrix[][], int key) {
        for(int i=0; i<matrix.length; i++) {
            for(int j=0; j<matrix[0].length; j++) {
                if(matrix[i][j] == key) {
                    System.out.println("Key is found in the index ("+i+","+j+")");
                    return true;
                }
            }
        }
        System.out.println("Key is not found");
        return false;
    }

    public static void MaxMin(int[][] matrix) {
        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;

        for(int i=0; i<matrix.length; i++) {
            for(int j=0; j<matrix[0].length; j++) {
                if(max < matrix[i][j]) {
                    max = matrix[i][j];
                }

                if(min > matrix[i][j]) {
                    min = matrix[i][j];
                }
            }
        }
        System.out.println("Max No in the array is "+ max);
        System.out.println("Min no in the array is "+ min);
    }

    public static void printSpiral(int[][] matrix) {
        int startRow = 0;
        int startCol = 0;
        int endRow = matrix.length-1;
        int endCol = matrix[0].length-1;

        while(startRow <= endRow && startCol <= endCol) {
            // Top
            for(int j=startCol; j<=endCol; j++) {
                System.out.print(matrix[startRow][j] + " ");
            }

            // right
            for(int i=startRow+1; i<=endRow; i++) {
                System.out.print(matrix[i][endCol] + " ");
            }

            // Bottom
            for(int j=endCol-1; j>=startCol; j--) {
                if(startRow == endRow) {
                    break;
                }
                System.out.print(matrix[endRow][j] + " ");
            }

            // left
            for(int i=endRow-1; i>=startRow+1; i--) {
                if(startCol == endCol) {
                    break;
                }
                System.out.print(matrix[i][startCol] + " ");
            }

            startRow++;
            startCol++;
            endRow--;
            endCol--;
        }
    }

    public static int sumOfDiagonal(int[][] matrix) {
        int sum = 0;
        // for(int i=0; i<matrix.length; i++) {
        //     for(int j=0; j<matrix[0].length; j++) {
        //         if(i == j) {
        //             sum += matrix[i][j];
        //         } 
        //         else if(i + j == matrix.length-1) {
        //             sum += matrix[i][j];
        //         }
        //     }
        // }
        // return sum;

        // optimised solution O(n)
        for(int i=0; i<matrix.length; i++) {
            // Primary sum
            sum += matrix[i][i];

            // middle element in secondary sum should not be there
            if(i != matrix.length-1-i) {
                sum += matrix[i][matrix.length-1-i];
            }
        }
        return sum;
    }

    public static boolean searchInSortedArray(int[][] matrix, int key) {
        int row = matrix.length-1;        // row = 0;
        int col = 0;                        // col = matrix[0].length;

        while(row >= 0&& col < matrix[0].length) {   // row < matrix.length && col >= 0
            if(matrix[row][col] == key) {
                System.out.println("key found in the index ("+ row + ","+ col+")");
                return true;
            }else if(matrix[row][col] > key) {
                row--;                                   // col--;
            } else {
                col++;                                  // row ++;
            }
        }
        System.out.println("Key is not found");
        return false;
    }
    public static void main(String[] args) {
        // int matrix[][] = {{1, 2, 3, 4}, 
        //                 {5, 6, 7, 8},
        //                 {9, 10, 11, 12}, 
        //                 {13, 14, 15, 16}};

        int matrix[][] = {{10, 20, 30, 40},
                          {15, 25, 35, 45},
                          {27, 29, 37, 48},
                          {32, 33, 39, 50}};
        
        // search(matrix, 6);
        // MaxMin(matrix);
    //     printSpiral(matrix);
        // System.out.println(sumOfDiagonal(matrix));
        searchInSortedArray(matrix, 35);
    }
}