// Longest word with all prefixes (trie- sigma)
public class Revision {
    static class Node {
        Node children[] = new Node[26];
        boolean eow = false;
        Node() {
            for(int i=0; i<26; i++) {
                children[i] = null;
            }
        }  
    }  

    public static Node root = new Node();

    public static void insert(String word) {   // Time = O(L) = L, length of longest word
        Node curr = root;
        for(int level=0; level<word.length(); level++) {
            char ch = word.charAt(level);
            int idx = ch - 'a';
            if(curr.children[idx] == null) {
                curr.children[idx] = new Node();
            }
            curr = curr.children[idx];
        }
        curr.eow = true;
    }

    public static String ans = "";
    public static void longestWord(Node root, StringBuilder temp) {
        if(root == null) return;
        for(int i=0; i<26; i++) {
            char ch = (char)(i + 'a');
            if(root.children[i] != null && root.children[i].eow == true) {
                temp.append(ch);
                if(temp.length() > ans.length()) {
                    ans = temp.toString();
                }
                longestWord(root.children[i], temp);
                temp.deleteCharAt(temp.length()-1);
            }
        }
    }

    public static void main(String[] args) {
        String words[] = {"a", "banana", "app", "appl", "ap", "apply", "apple"};
        for(int i=0; i<words.length; i++) {
            insert(words[i]);
        }

        longestWord(root, new StringBuilder(""));
        System.out.println(ans);
    }
}