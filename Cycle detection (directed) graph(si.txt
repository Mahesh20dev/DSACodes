//Cycle detection (directed) graph(sigma)
import java.util.*;
public class OnceAgain {
    static class Edge {
        int src;
        int dest;
        public Edge(int s, int d) {
            this.src = s;
            this.dest = d;
        }
    }

    public static void createGraph(ArrayList<Edge> graph[]) {
        for(int i=0; i<graph.length; i++) {
            graph[i] = new ArrayList<>();
        }

        // cyclic
        // 0 vertex
        // graph[0].add(new Edge(0, 1));

        // // 1 vertex
        // graph[1].add(new Edge(1, 2));

        // // 2 vertex
        // graph[2].add(new Edge(2, 3));

        // // 3 vertex
        // graph[3].add(new Edge(3, 1));

        // Acyclic
        graph[0].add(new Edge(0, 1));
        graph[0].add(new Edge(0, 2));

        graph[1].add(new Edge(1, 3));

        graph[2].add(new Edge(2, 3));
    }

    // Time = O(V + E)
    public static boolean isCycle(ArrayList<Edge> graph[]) {
        boolean vis[] = new boolean[graph.length];
        boolean stack[] = new boolean[graph.length];

        for(int i=0; i<graph.length; i++) {
            if(!vis[i]) {
                if(isCycleUtil(graph, i, vis, stack)) {
                    return true;
                }
            }
        }
        return false;
    }

    public static boolean isCycleUtil(ArrayList<Edge> graph[], int curr, boolean vis[], boolean stack[]) {
        vis[curr] = true;
        stack[curr] = true;

        for(int i=0; i<graph[curr].size(); i++) {
            Edge e = graph[curr].get(i);
            if(stack[e.dest]) {  // cycle exist
                return true;
            }
            if(!vis[e.dest] && isCycleUtil(graph, e.dest, vis, stack)) {
                return true;
            }
        }
        stack[curr] = false;
        return false;
    }

// bfs using Kahn's algo
    public static void calcInDeg(ArrayList<Edge> graph[], int inDeg[]) {
        for(int i=0; i<graph.length; i++) {
            for(int j=0; j<graph[i].size(); j++) {
                Edge e = graph[i].get(j);
                inDeg[e.dest]++;
            }
        }
    }

    // BFS using Kahn's Algorithm to detect cycle in a directed graph
    // Time and space = O(V + E)
    public static boolean isCycleBfs(ArrayList<Edge> graph[]) {
        int inDeg[] = new int[graph.length];
        Queue<Integer> q = new LinkedList<>();
        calcInDeg(graph, inDeg);

        // Add all vertices with in-degree 0 to the queue
        for(int i=0; i<inDeg.length; i++) {
            if(inDeg[i] == 0) {
                q.add(i);
            }
        }
        int count = 0;

        // bfs
        while(!q.isEmpty()) {
            int curr = q.remove();
            count++;
            
            // Decrease the in-degree of all adjacent vertices
            for(int i=0; i<graph[curr].size(); i++) {
                Edge e = graph[curr].get(i);
                inDeg[e.dest]--;
                // If in-degree becomes 0, add it to the queue
                if(inDeg[e.dest] == 0) {
                    q.add(e.dest);
                }
            }
        }
        // If count of visited nodes is not equal to the number of vertices, graph contains a cycle
        return count != graph.length;
    }

    public static void main(String[] args) {
        int V = 4;
        @SuppressWarnings("unchecked")
        ArrayList<Edge> graph[] = new ArrayList[V];  // null --> empty array
        createGraph(graph);
        System.out.println(isCycle(graph));
    }
}
